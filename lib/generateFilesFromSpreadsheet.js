'use strict'

const fs = require('fs')
const dot = require('dot-object')
const { authenticate } = require('@google-cloud/local-auth');
const { google } = require('googleapis')

// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.

const FORMAT_CONFIG = {
	cjs: {
		FILE_EXTENSION: 'js',
		DATA_PREFIX: 'module.exports = ',
	},
	esm: {
		FILE_EXTENSION: 'js',
		DATA_PREFIX: 'export default ',
	},
	json: {
		FILE_EXTENSION: 'json',
		DATA_PREFIX: '',
	},
}

/**
 * Format error message to display
 * @private
 *
 * @param {string} message - Custom message
 * @param {string} error - System error
 * @returns {string} Fromatted error message
 */
function formatErrorMessage(message, error) {
	return error ? `${message}:\n\t${error}` : message
}

/**
 * Reads previously authorized credentials from the save file.
 * @private
 * 
 * @param {string} tokenFile - Path of file containing credentials (token generated by Google API)
 * @return {Promise<OAuth2Client|null>}
 */
async function loadSavedCredentialsIfExist(tokenFile) {
  try {
    const content = await fs.promises.readFile(tokenFile);
    const credentials = JSON.parse(content);
    return google.auth.fromJSON(credentials);
  } catch (err) {
    console.log(err)
    return null
  }
}

/**
 * Serializes credentials to a file comptible with GoogleAUth.fromJSON.
 * @private
 * 
 * @param {OAuth2Client} client
 * @param {string} credentialsFile - Path of file containing client secret data (generated by Google Developers Console)
 * @param {string} tokenFile - Path of file containing credentials (token generated by Google API)
 * @return {Promise<void>}
 */
async function saveCredentials(client, credentialsFile, tokenFile) {
  const content = await fs.promises.readFile(credentialsFile);
  const keys = JSON.parse(content);
  const key = keys.installed || keys.web;
  const payload = JSON.stringify({
    type: 'authorized_user',
    client_id: key.client_id,
    client_secret: key.client_secret,
    refresh_token: client.credentials.refresh_token,
  });
  await fs.promises.writeFile(tokenFile, payload);
}
/**
 * Load or request or authorization to call APIs.
 * @private
 *
 * @param {string} credentialsFile - Path of file containing client secret data (generated by Google Developers Console)
 * @param {string} tokenFile - Path of file containing credentials (token generated by Google API)
 * @returns {Promise<OAuth2Client>} Configured OAuth2Client instance
 */
async function authorize(credentialsFile, tokenFile) {
  const loadedClient = await loadSavedCredentialsIfExist(tokenFile);
  if (loadedClient) { 
    return loadedClient;
  }
  const client = await authenticate({
    scopes: SCOPES,
    keyfilePath: credentialsFile,
  });
  if (client.credentials) {
    await saveCredentials(client, credentialsFile, tokenFile);
  }
  return client;
}


/**
 * Get rows data of spreadsheet using Google Sheets API
 * @private
 *
 * @param {OAuth2Client} auth - Configured OAuth2Client instance
 * @param {string} spreadsheetId - Id of spreadsheet to parse
 * @param {string} range - Range of cells to parse
 * @returns {Promise<Object[]>} Rows data of spreadsheet
 */
async function getSpreadsheetRows(auth, spreadsheetId, range) {
	try {
		const sheets = google.sheets({ version: 'v4', auth })
		const { data } = await sheets.spreadsheets.values.get({ spreadsheetId, range })

		return data.values
	} catch (err) {
		throw new Error(formatErrorMessage(`Error loading spreadsheet ${spreadsheetId} with range ${range}`, err))
	}
}

/**
 * Generate i18n files parsing rows data of spreadsheet
 * @private
 *
 * @param {Object[]} rows - List of rows
 * @param {number} keyIndex - Index of key column
 * @param {number} langIndex - Index of first language column
 * @param {string} outputDir - Path of output directory
 * @param {string} format - Format of generated files
 * @param {number} beautify - Number of spaces to insert white space
 * @returns {Promise} No data
 */
async function generateFiles(rows, keyIndex, langIndex, outputDir, format, beautify) {
	if (rows.length === 0) {
		throw new Error(formatErrorMessage('No data found in spreadsheet'))
	}

	const header = rows[0]
	let translations = {} // Result object containing all translations

	// Create sub-object for each language
	for (let i = langIndex; i < header.length; i++) {
		const lang = header[i]
		translations[lang] = {}
	}

	// For each data row
	for (let i = 1; i < rows.length; i++) {
		const row = rows[i]
		const key = row[keyIndex]

		// For each language
		for (let j = langIndex; j < row.length; j++) {
			const lang = header[j]
			const value = row[j]

			// Generate and add sub-object to translations
			dot.str(key, value, translations[lang])
		}
	}

	// Create output directory
	if (!fs.existsSync(outputDir)) {
		console.info(`Creating ${outputDir} output directory`)

		try {
			fs.mkdirSync(outputDir)
			console.info(`${outputDir} has been created`)
		} catch (err) {
			throw new Error(formatErrorMessage(`Error creating directory ${outputDir}`, err))
		}
	}

	// Write file for each language
	for (let i = langIndex; i < header.length; i++) {
		const formatConfig = FORMAT_CONFIG[format]
		const lang = header[i]
		const file = `${outputDir}/${lang}.${formatConfig.FILE_EXTENSION}`
		const data = `${formatConfig.DATA_PREFIX}${JSON.stringify(translations[lang], null, beautify)}`

		try {
			fs.writeFileSync(file, data)
			console.info(`${file} has been created`)
		} catch (err) {
			console.error(formatErrorMessage(`Error writing file ${file}`, err))
		}
	}
}

module.exports = {
	/**
	 * Generate files parsing Google Sheets spreadsheet
	 *
	 * @param {string} spreadsheetId - Id of spreadsheet to parse
	 * @param {string} credentialsFile - Path of file containing client secret data (generated by Google Developers Console)
	 * @param {string} tokenFile - Path of file containing credentials (token generated by Google API)
	 * @param {string} range - Range of cells to parse
	 * @param {number} keyIndex - Index of key column
	 * @param {number} langIndex - Index of first language column
	 * @param {string} outputDir - Path of output directory
	 * @param {string} format - Format of generated files
 	 * @param {number} beautify - Number of spaces to insert white space
	 * @returns {Promise} No data
	 */
	async generateFilesFromSpreadsheet(
		spreadsheetId,
		credentialsFile,
		tokenFile,
		range,
		keyIndex,
		langIndex,
		outputDir,
		format,
		beautify,
	) {
		try {
			if (!spreadsheetId) {
				throw new Error(formatErrorMessage('Spreadsheet ID is required'))
			}

			const auth = await authorize(credentialsFile, tokenFile)
			const rows = await getSpreadsheetRows(auth, spreadsheetId, range)
			await generateFiles(rows, keyIndex, langIndex, outputDir, format, beautify)
		} catch (error) {
			console.error(error.message)
		}
	},
}